import numpy as np
from torch.utils.data import Dataset

class UserItemInterwithFeatureFairnessDataset(Dataset):
    def __init__(self, data, num_items, user_feature_matrix, item_feature_matrix, fair_labels):
        self.data = data
        self.user_feature_matrix = user_feature_matrix
        self.item_feature_matrix = item_feature_matrix
        self.K = num_items
        self.fair_labels = fair_labels

    def __getitem__(self, index):
        user = self.data[index][0]
        item = self.data[index][1]
        label = self.data[index][2]
        user_feature = np.array([self.user_feature_matrix[user]] * self.K) # Made sure same user has all features repeated per each item sampled
        item_feature = self.item_feature_matrix[item]
        fair_label = self.fair_labels[item]
        return user_feature, item_feature, fair_label,label
    def __len__(self):
        return len(self.data)


class UserItemInterwithFeatureDataset(Dataset):
    def __init__(self, data, user_feature_matrix, item_feature_matrix):
        self.data = data
        self.user_feature_matrix = user_feature_matrix
        self.item_feature_matrix = item_feature_matrix

    def __getitem__(self, index):
        user = self.data[index][0]
        item = self.data[index][1]
        label = self.data[index][2]
        user_feature = self.user_feature_matrix[user]
        item_feature = self.item_feature_matrix[item]
        return user_feature, item_feature, label
    def __len__(self):
        return len(self.data)

class UserItemInterDataset(Dataset):
    def __init__(self, data,num_pos = 1):
        self.data = data
        self.pos = num_pos
        

    def __getitem__(self, index):
        user = self.data[index][0]
        pos_item = self.data[index][1][0]
        neg_item = np.random.choice(self.data[index][1][self.pos:],1)[0]

        return user, pos_item, neg_item

    def __len__(self):
        return len(self.data)